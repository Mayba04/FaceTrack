import React, { useEffect, useState } from "react";
import { Card, Typography, Button, Divider, Statistic, Row, Col, Spin, message } from "antd";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { fetchTodaysSessionsAction } from "../../store/action-creators/sessionAction";
import { RootState } from "../../store";

const { Title, Paragraph } = Typography;

const StudentDashboard: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const user = useSelector((state: RootState) => state.UserReducer.loggedInUser);

  const [loading, setLoading] = useState(false);
  const [todaySessionsCount, setTodaySessionsCount] = useState(0);
  const [missedCount, setMissedCount] = useState(0); // –Ø–∫—â–æ —î API ‚Äî —Å—é–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
  const [totalSessions, setTotalSessions] = useState(0); // –Ø–∫—â–æ —î API ‚Äî —Å—é–¥–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó
  const missedPercent = totalSessions ? Math.round((missedCount / totalSessions) * 100) : 0;

  useEffect(() => {
    if (user?.id) {
      fetchStudentStats();
    }
  }, [user]);

  const fetchStudentStats = async () => {
    try {
      setLoading(true);

      // –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö —Å–µ—Å—ñ–π
      const sessionsResponse: any = await dispatch(fetchTodaysSessionsAction(user?.id as any) as any);
      if (sessionsResponse.success) {
        setTodaySessionsCount(sessionsResponse.payload.length);
      } else {
        message.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ");
      }

      // TODO: –ó–∞–ø–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–∞ —Ç–∏–∂–¥–µ–Ω—å —ñ –≤—Å—ñ —Å–µ—Å—ñ—ó, –∫–æ–ª–∏ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –±–µ–∫–µ–Ω–¥
      setMissedCount(2)
      setTotalSessions(2)

    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: "32px 16px", maxWidth: 700, margin: "auto" }}>
      <Card style={{ borderRadius: 16, boxShadow: "0 4px 16px rgba(0,0,0,0.08)" }}>
        <Title level={2}>üëã –í—ñ—Ç–∞—î–º–æ —É FaceTrack</Title>

        {loading ? (
          <div style={{ textAlign: "center", padding: "20px 0" }}>
            <Spin size="large" />
          </div>
        ) : (
          <>
            {/* 1. –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è */}
            <Divider orientation="left">üéØ –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è</Divider>
            <Paragraph>
              –£ –≤–∞—Å <b>{todaySessionsCount}</b> —Å–µ—Å—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ
            </Paragraph>
            <Button type="primary" onClick={() => navigate("/student/sessions/today")}>
              –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è
            </Button>

            {/* 2. –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è */}
            <Divider orientation="left">‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è</Divider>
            <Button onClick={() => navigate("/student/attendance/history")}>
              –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –≤—ñ–¥–º—ñ—Ç–∫–∏
            </Button>

            {/* 3. –ú–∞–π–±—É—Ç–Ω—ñ —Å–µ—Å—ñ—ó */}
            <Divider orientation="left">üìÖ –ú–∞–π–±—É—Ç–Ω—ñ —Å–µ—Å—ñ—ó</Divider>
            <Paragraph style={{ color: "#888" }}>–í —Ä–æ–∑—Ä–æ–±—Ü—ñ...</Paragraph>

            {/* 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Divider orientation="left">üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Divider>
            <Row gutter={16}>
              <Col span={8}>
                <Statistic title="–ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞ —Ç–∏–∂–¥–µ–Ω—å)" value={missedCount} suffix="–Ω" />
              </Col>
              <Col span={8}>
                <Statistic title="–£—Å—å–æ–≥–æ —Å–µ—Å—ñ–π" value={totalSessions} />
              </Col>
              <Col span={8}>
                <Statistic title="% –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å" value={missedPercent} suffix="%" />
              </Col>
            </Row>
          </>
        )}
      </Card>
    </div>
  );
};

export default StudentDashboard;
